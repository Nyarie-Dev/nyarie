@startuml default_domain_model

class Character {
  + id: UUID
  + name: String
  + title: String
  + health: float
  + gear: String
  + factionId: UUID
  + currentRegion: Region
  + commandedGroupId: UUID
}

class CharacterFaction extends Character {
  + faction: FactionCommands
}

class Faction {
  + id: UUID
  + name: String
  + description: String
  + motto: String
  + leaderCharacterId: UUID
  + originFactionId: UUID
}

class FactionCharacter extends Faction {
  + characters: Set<CharacterCommands>
}

class Region {
  + id: String
  + name: String
  + terrainType: TerrainType
  + neighboringRegions: Set<Region>
  + claimantFactionIds: Set<UUID>
  + claimbuildIds: Set<UUID>
}

class TerrainType {
  + id: String
  + name: String
  + movementDuration: Duration
}

Character "1" -- "1" Region : resides in >
CharacterFaction "1" -- "1" Faction : member of
FactionCharacter "1" o-- "*" Character : has members
Region "1" -- "1" TerrainType : has >
Region "*" -- "*" Region : neighbors >

' Interfaces from nyarie-api are omitted for simplicity
' but implemented classes are shown (e.g., Character, Faction)
' Details like Identifiable, CharacterCommands, FactionCommands etc. are implied by inheritance/implementation

interface Moveable {
  + moveTo(Region region)
  + cancelMovement()
  + getMovement()
  + getRemainingDuration()
}
interface Commandable {
  + getCommanderId()
  + setCommanderId(UUID id)
}

Character ..|> Moveable
Unit ..|> Moveable
Company ..|> Moveable
Company ..|> Commandable
Army ..|> Moveable
Army ..|> Commandable

class Army {
  + id: UUID
}

class Company {
  + id: UUID
}

class Unit {
  + id: UUID
}

Army "1" o-- "*" Company : consists of >
Company "1" o-- "*" Unit : consists of >

class Claimbuild {
  + name: String
  + region: Region
  + claimbuildType: ClaimbuildType
  + owningFactionId: UUID
  + coordinates: Coordinate
  + stationedUnits: Set<UUID>
  + createdUnits: Set<UUID>
  + productionSites: Set<UUID>
  + specialSites: Set<UUID>
  + houses: Map<HouseType, Integer>
  + owningCharacters: Set<UUID>
}

class ClaimbuildType {
  + name: String
  + allowedFactions: Set<UUID>
  + allowedRegions: Set<Region>
  + allowedTerrainTypes: Set<TerrainType>
  + allowedProductionSites: Set<ProductionSite>
  + productionSiteSlots: Integer
  + specialSitesSlots: Integer
  + housingRequirements: Map<HouseType, Integer>
}

Claimbuild "1" -- "1" ClaimbuildType : has type >
Claimbuild "1" o-- "*" HouseType : has houses >
ClaimbuildType "1" o-- "*" HouseType : requires >

class HouseType {
  + name: String
  + foodConsumption: Float
  + providedCitizens: Integer
}

class ProductionSite {
  + name: String
  + producedResources: Set<ResourceWithAmount>
  + allowedFactions: Filter<UUID>
  + allowedRegions: Filter<Region>
  + allowedTerrainTypes: Filter<TerrainType>
}

@enduml default_domain_model